# yaml-language-server: $schema=./schemas/declarative_component_schema.yaml

version: 6.33.4

streams:
  - $ref: "#/definitions/streams/test_stream"

type: DeclarativeSource

check:
  type: CheckStream
  stream_names:
    - report_stream

definitions:

  partition_router:
    type: ListPartitionRouter
    values: "{{ config.accounts }}"
    cursor_field: account
    request_option:
      type: RequestOption
      field_name: account
      inject_into: request_parameter

  requesters:
    base_requester:
      type: HttpRequester
      url_base: "{{ config.url_base }}"
      authenticator: "#/definitions/authentication/selective_authenticator"


    creation_requester:
      $ref: "#/definitions/requesters/base_requester"
      path: "{{ config.create_request_path }}"
      http_method: POST
      request_body_json:
        criteria:
          limit: "500000"
          metric: "{{ config['metric'] }}"
          currency: "{{ config['currency'] }}"
          dimension: "{{ config['dimension'] }}"
          date_range: "yesterday"

    polling_requester:
      $ref: "#/definitions/requesters/base_requester"
      path: "{{ config.polling_request_path }}"
      http_method: GET
      
    download_requester:
      $ref: "#/definitions/requesters/base_requester"
      path: "{{ config.download_request_path }}"
      http_method: GET

  authentication:
    basic_authenticator:
      type: BasicHttpAuthenticator
      username: "{{ config.username }}"
      password: "{{ config.password }}"

    session_token_authenticator:
      type: SessionTokenAuthenticator
      login_requester:
        type: HttpRequester
        url_base: "{{ config.url_base }}"
        path: "{{ config.session_token_login_path }}"
        authenticator:
          $ref: "#/definitions/authentication/basic_authenticator"
      session_token_path: 
        - "{{ config.session_token_path }}"
      expiration_duration: "{{ config.session_token_exp_duration }}"
      request_authentication:
        type: Bearer
      

    selective_authenticator:
      type: SelectiveAuthenticator
      authenticator_selection_path: 
        - "credentials"
      authenticators:
        basic: "#/definitions/authentication/basic_authenticator"
        session_token: "#/definitions/authentication/session_token_authenticator"

  api_status_mapping:
    failed:
      - failed
    running:
      - queued
      - pending
    timeout:
      - timeout
    completed:
      - success

  api_extractors:
    urls_extractor:
      type: DpathExtractor
      field_path:
        - "{{ config.url_extractor_path }}"

    status_extractor:
      type: DpathExtractor
      field_path:
        - "{{ config.status_path }}"

  record_selector:
    type: RecordSelector
    extractor:
      type: DpathExtractor
      field_path:
        - content

  pagination:
    type: DefaultPaginator
    pagination_strategy:
      type: PageIncrement
      page_size: 5
      start_from_page: 1
      inject_on_first_request: true
    page_token_option:
      type: RequestOption
      field_name: page
      inject_into: request_parameter

  

  async_retriever:
    type: AsyncRetriever
    creation_requester: "#/definitions/requesters/creation_requester"
    polling_requester: "#/definitions/requesters/polling_requester"
    download_requester: "#/definitions/requesters/download_requester"
    status_mapping: "#/definitions/api_status_mapping"
    status_extractor: "#/definitions/api_extractors/status_extractor"
    partition_router: "#/definitions/partition_router"
    urls_extractor: "#/definitions/api_extractors/urls_extractor"
    record_selector: "#/definitions/record_selector"
    download_paginator: "#/definitions/pagination"
        

  streams:
    test_stream:
      type: DeclarativeStream
      retriever: 
        $ref: "#/definitions/async_retriever"


metadata:
  assist: {}
  testedStreams:
    report_stream:
      hasRecords: true
      streamHash: c5e2cf9acc6f9a9f48a150a4bfde1bd2e09c244b
      hasResponse: true
      primaryKeysAreUnique: true
      primaryKeysArePresent: true
      responsesAreSuccessful: true
  autoImportSchema: {}

schemas: {}
